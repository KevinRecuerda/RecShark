using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;
using Dapper.FastCrud;
using Npgsql;
using Npgsql.NameTranslation;
using NpgsqlTypes;

namespace RecShark.Data.Db.Relational.Extensions
{
    public static class NpgsqlConnectionExtensions
    {
        private static readonly NpgsqlSnakeCaseNameTranslator NpgsqlSnakeCaseNameTranslator = new NpgsqlSnakeCaseNameTranslator();

        public static void BulkInsert<T>(
            this NpgsqlConnection postgresqlConnection,
            IEnumerable<T>        items)
        {
            var properties = typeof(T).GetProperties()
                                      .Where(p => !IsAutoGenerated(p))
                                      .ToArray();

            var copyQuery       = BuildCopyQuery<T>(properties);
            var propertyWriters = BuildPropertyWriters<T>(properties);

            using (var writer = postgresqlConnection.BeginBinaryImport(copyQuery))
            {
                foreach (var item in items)
                {
                    writer.StartRow();

                    foreach (var propertyWriter in propertyWriters)
                        propertyWriter(item, writer);
                }

                writer.Complete();
            }
        }

        private static List<Action<T, NpgsqlBinaryImporter>> BuildPropertyWriters<T>(IEnumerable<PropertyInfo> properties)
        {
            var actions = new List<Action<T, NpgsqlBinaryImporter>>();

            foreach (var property in properties)
            {
                var propWriter = GetPropertyWriter(property);
                Action<T, NpgsqlBinaryImporter> action = (item, writer) =>
                {
                    var value = property.GetValue(item);
                    propWriter(value, writer);
                };
                actions.Add(action);
            }

            return actions;
        }

        private static Action<object, NpgsqlBinaryImporter> GetPropertyWriter(PropertyInfo property)
        {
            var underlyingNullableType = Nullable.GetUnderlyingType(property.PropertyType);
            if (underlyingNullableType != null && underlyingNullableType.IsEnum)
            {
                var enumWriter = GetEnumPropertyWriter(underlyingNullableType);
                return (value, writer) =>
                {
                    if (value != null)
                        enumWriter(value, writer);
                    else
                        writer.WriteNull();
                };
            }

            if (property.PropertyType.IsEnum)
            {
                return GetEnumPropertyWriter(property.PropertyType);
            }

            var npgsqlDbType = GetSpecifiedDbType(property);
            if (npgsqlDbType.HasValue)
                return (value, writer) => writer.Write(value, npgsqlDbType.Value);

            return (value, writer) => writer.Write(value);
        }

        private static Action<object, NpgsqlBinaryImporter> GetEnumPropertyWriter(Type type)
        {
            return (value, writer) =>
            {
                var convertedValue = ConvertEnumValue(type, value);
                writer.Write(convertedValue);
            };
        }

        private static object ConvertEnumValue(Type type, object value)
        {
            var enumUnderlyingType = type.GetEnumUnderlyingType();
            var convertedValue     = Convert.ChangeType(value, enumUnderlyingType);
            return convertedValue;
        }

        private static bool IsAutoGenerated(PropertyInfo p)
        {
            return p.GetCustomAttributes(typeof(DatabaseGeneratedAttribute), false)
                    .Cast<DatabaseGeneratedAttribute>()
                    .SingleOrDefault()
                   ?.DatabaseGeneratedOption
                == DatabaseGeneratedOption.Identity;
        }

        private static NpgsqlDbType? GetSpecifiedDbType(PropertyInfo property)
        {
            return property.GetCustomAttributes(typeof(NpgsqlDbTypeAttribute), false)
                           .Cast<NpgsqlDbTypeAttribute>()
                           .SingleOrDefault()
                          ?.NpgsqlType;
        }

        private static string BuildCopyQuery<T>(IEnumerable<PropertyInfo> properties)
        {
            var schema        = OrmConfiguration.GetDefaultEntityMapping<T>().SchemaName;
            var table         = OrmConfiguration.GetDefaultEntityMapping<T>().TableName;
            var columnNames   = properties.Select(GetColumnName);
            var columnsString = string.Join(",", columnNames);

            var importQuery = $@"COPY {schema}.{table}({columnsString}) FROM STDIN (FORMAT BINARY)";
            return importQuery;
        }

        private static string GetColumnName(PropertyInfo p)
        {
            return p.GetCustomAttributes(typeof(ColumnAttribute), false)
                    .Cast<ColumnAttribute>()
                    .SingleOrDefault()
                   ?.Name
                ?? NpgsqlSnakeCaseNameTranslator.TranslateMemberName(p.Name);
        }
    }
}